{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to blackcurrant training","text":"<p>This is a simple repository of the learning path to become a Full Stack Developer. All the critical components (Database, Frontend Framework, Backend Framework) will be covered. The resources are mentioned in the order they have to be learned as there will be a dependency on previously learned concepts.</p> <p>How to use</p> <p>At Blackcurrant, we don't believe in spoon-feeding. Lifelong learning will be a part of your life here. To supplement this, this site is created to be a loose syllabus that points freshers in the right direction.</p> <p>This Repository does not include any documentation itself, but only links to training resources. This guide will help you get acquainted with the tools and frameworks we use at Blackcurrant so you can join and be a productive member of the team right away.</p> <p>Skip Sections</p> <p>You may skip the sections that you already know or are irrelevant to your field.</p> <p>Resources</p> <p>Most pages have a resources section that has links to official sources or project documentation. Documentation is always the holy grail and reading through this will expose you to many concepts which might never be covered in youtube videos.</p> <p>Courses</p> <p>Some sections have a course linked to them. These courses are free and you're expected to complete them and add that course certificate to your profile. All the courses mentioned here are small and you should be able to comlete them well before the paid tier starts</p> <p>ChatGPT / CoPilot Safe usage</p> <p>Using Coding assistants is going to be a norm in the near future, but please keep these wise words with you on when to use and when not to use them.</p> <p></p> <p>Tutorial Hell</p> <p>While youtube videos are a quick way to get started, they often lack the depth of knowledge that actual documentation provides. DO NOT rely on videos only, they are merely there to provide an overview and do not constitute the full syllabus.</p> <p>Do not go through these sections with an exam-oriented mindset. These are real-world tools that you're going to use day in and day out. Go at your own pace, really experiment with your own code as much as possible, and learn with the only intention to improve your skills.</p> <p></p> <p>READ THIS BEFORE GOING AHEAD</p> <p>https://dev.to/chrisbenjamin/escaping-tutorial-hell-ncd</p>"},{"location":"#choose-your-area-of-specilization","title":"Choose your area of specilization","text":"<p>There is a saying which goes \"Jack of all trades, master of none.\". The technology landscape is too vast today for a single human to comprehend even if they study all through their life. But that's a useless endeavor because you'll never be able to become productive.</p> <p>While knowing multiple concepts is important, so is choosing your specialization. You should ideally be in a position where you know your field with great detail but are still able to comprehend what your colleagues mean when there is a project-related discussion happening. </p> <p></p> <p>Gaining depth of knowledge in your field is of primary importance, and having a working understanding of what your colleagues are doing is the next priority. So it's better to go ahead with a modified saying, \"Jack of all trades, master of Some.\"</p>"},{"location":"#get-started-with-mean","title":"<p>Get Started with MEAN</p>","text":""},{"location":"build-with-us/","title":"Blackcurrant \u2764\ufe0f Software","text":"<p>Blackcurrant Labs is an agile, full stack software application Development &amp; Consulting company, possessing expertise in delivering customised end-to-end I.T. solutions to businesses. Blackcurrant has excelled in successfully deploying mobile app-enabled cloud-based business applications with a host of features/functionalities for a wide spectrum of corporate MNCs as well as SME clients.</p> <p>The idea is to become a versatile service provider for a niche area in varied domains &amp; acquire deep subject matter understanding to deliver a Robust &amp; Exquisite product.</p> <p>Jay Mehta</p> <p>Born in the cloud, we don't suffer the drag of legacy software. We're a highly dynamic team of young and driven individuals ready to take on challenges of complexity and scale.</p> <p>Sanket Berde</p>"},{"location":"build-with-us/#softwares-with-us","title":"<p>\ud83d\udd28 softwares with us</p>","text":""},{"location":"contribute/","title":"Contributions are welcome","text":"<p>This is an open source effort at Blackcurrant to provide the most relevant and free training materials to colleges and new joinees so they learn relevant real world skills. While going through these pages, you may encounter better resources elsewhere on the web. It would be great if you can add these resources to our guide for the next batch, This could also become your first contribution to Open Source !</p> <p>Built using MkDocs</p> <p>This site is built using mkdocs.org. Mkdocs is a static site generator which uses markdown to automatically make static html pages which are ready to host. Visit the site for more info on how to setup site navigation.</p> <p>Themed with Mkdocs Material</p> <p>Visit mkdocs-material for documentation on more advanced concepts specific to this theme.</p> <p>Markdown Cheatsheet</p> <p>Visit https://www.markdownguide.org/basic-syntax/#headings for getting started with markdown in under 5 mins.</p>"},{"location":"contribute/#local-setup","title":"Local Setup","text":"<ul> <li>Install python</li> <li><code>pip install virtualenv</code> - Install VirtualEnv to isolate this project</li> <li><code>virtualenv venv</code> - Create a new virtualenv</li> <li><code>source ./venv/bin</code> - Activate this virtual environment</li> <li><code>pip install -r requirements.txt</code> - Install python deps</li> </ul>"},{"location":"contribute/#commands","title":"Commands","text":"<ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs help</code> - Print this help message.</li> </ul> <p>How to contribute</p> <p>Fork the project on github, add your contributions start a pull request. Our team will review the PR's and merge with our codebase.</p>"},{"location":"git/","title":"Git","text":"<p>Git is the primary way to collaborate with your colleagues on real-world coding projects. Watch this quick intro video.</p> <p>While Github is the most popular choice for hosted git repos in the open source world, Gitlab and Bitbucket are used most often used in private repos.</p>"},{"location":"git/#branching-strategy","title":"Branching Strategy","text":"<p>Using a branching strategy is crucial to be on the same page with your team.  The actual branching strategy used will vary from project to project and will be handed to you by your team lead.</p> <p>An example strategy is shown below.</p> <p></p> <p>Course</p> <p>Complete this course https://www.coursera.org/learn/version-control-with-git</p>"},{"location":"jobs/","title":"Life @ Blackcurrant","text":"<p>We're a young company committed to making a dent in the software space. We have been able to deliver outstanding growth to our clients by employing custom built softwares specific to the industry verticals.</p> <p>Apart from work, we're also a chill bunch to hang out with, the average age at blackcurant is 26 years and we do love to Work hard, Party Harder.</p> <p>We generally have two annual trips to attractive locations and a lot of other one day activities monthly.</p> <p>Check out our album on life.blackcurrantlabs.com</p>"},{"location":"jobs/#positions-were-hiring","title":"Positions we're hiring","text":"<ul> <li>Full stack developers in MEAN</li> <li>QA Specialists</li> <li>UI/UX Specialists</li> </ul> <p>Apply here.</p>"},{"location":"swagger/","title":"Swagger","text":"<p>Also known as open api spec, is a structured way of documenting APIs. A swagger docs contains all the different routes exposed by the backend, ways to authenticate them, and the inputs and outpus that that particular API provides.</p> <p>Swagger doc can be thought of as a contract between the frontend and the backend.</p> <p>We use swagger 2.0 internally as it has the largest ecosystem and support across the board.</p> <p>As a backend developer, you're expected to document all the APIs you develop. Moreover, we recommened that you write the swagger doc for the api first and then write the API logic while making sure the actual API conforms exactly to what was documented in Swagger.</p> <p>We use generated client libraries extensively which reduces the effort of writing API specific login in the frontend.</p> <p>Interative explorer</p> <p>https://openapi-map.apihandyman.io/ is an interactive explorer for the fields available in a swagger doc</p> <p>Online Editor</p> <p>https://editor.swagger.io/ is an online editor to get started with swagger quickly. Although in real-world projects the swagger file is included in source control.</p>"},{"location":"Auth/authentication/","title":"Authentication","text":"<p>In a de-coupled environment where the frontend and backend are developed independently, we need a way of storing credentials securely on the server and the frontend client as well. Since most apps we build have multiple clients (Android/IOS/Web), we don't use outdated methods like using serverside $SESSION variables.</p> <p>For storing passwords securely on the server, we use hashing. The most popular algorithm is Bcrypt mentioned in the next section.</p> <p>The frontend also needs to store some tokens to access the backend which is cryptographically secure such that any modifications to them will leave them invalid.  We use RSA PKI signing within JWTs for the same. This is also discussed in the next sections.</p> <p>Apart from these, there are also social sign-on (Login with Google / Facebook) which are also frequently used but are not covered in this guide.</p>"},{"location":"Auth/bcrypt/","title":"Hashing &amp; Bcrypt","text":"<p>Hashing is not new and various methods of hashing like SHA-1 SHA-256 MD5 are all very popular.  But the problem with storing a hashed password is that someone can maintain a table of frequently used passwords along with their hashes and simply query this table for a quick attack.</p> <p>Since hashes are always deterministic, to get away from this problem, we use salting.</p>"},{"location":"Auth/bcrypt/#salting","title":"Salting","text":"<p>Salting is the process of adding a unique bit of secret specific to your application to the password and then hashing it.  If what you add is unique, then the hash cannot be present in any pre-computed hash tables.</p>"},{"location":"Auth/bcrypt/#bcrypt","title":"Bcrypt","text":"<p>Bcrypt hashes combine these best practices and provide not only a unique salt per application but a unique salt per password. These are conveniently wrapped together in a string that can be safely stored in the database.</p> <p>Resource</p> <p>Check out the npm package https://www.npmjs.com/package/bcrypt</p>"},{"location":"Auth/jwt/","title":"JWT","text":"<p>After authentication is complete, the backend sends a unique token to the frontend.  This is usually a JWT or JSON Web Token.</p> <p>JWTs are pure JSON objects which are base64 encoded to make them concise.  JWTs also support signing with RSA Keys so that if any modifications are made to the token stored in a browser, its signature will not match and the JWT will fail validation.</p> <p>Apart from this, JWT defines some standards to check expiration, validity, authenticated user, custom fields etc.</p> <p>Resource</p> <p>Check out the npm package https://www.npmjs.com/package/json-web-token</p> <p>Resource</p> <p>Check out the online jwt decoder https://jwt.io/</p>"},{"location":"BA/Index/","title":"Business Analyst","text":""},{"location":"BA/Index/#what-is-business-analysis","title":"What is Business Analysis?","text":"<p>Business Analysis is the set of tasks, knowledge, and techniques required to identify business needs and determine solutions to enterprise business problems. Although, the general definition is similar, the practices and procedures may vary in various industries.</p> <p>In Information technology industry, solutions often include a systems development component, but may also consist of process improvement or organizational change.</p> <p>Business analysis may also be performed to understand the current state of an organization or to serve as a basis for the identification of business needs. In most cases, however, business analysis is performed to define and validate solutions that meets business needs, goals, or objectives.</p>"},{"location":"BA/Index/#why-a-business-analyst","title":"Why a Business Analyst?","text":"<p>Organizations employ business analysis for the following reasons:</p> <ul> <li> <p>To understand the structure and the dynamics of the organization in which a system is to be deployed.</p> </li> <li> <p>To understand current problems in the target organization and identify improvement potentials.</p> </li> <li> <p>To ensure that the customer, end user, and developers have a common understanding of the target organization.</p> </li> </ul> <p>In the initial phase of a project, when the requirements are being interpreted by the solution and design teams, the role of a Business analyst is to review the solutions documents, work closely with the solutions designers (IT team) and Project managers to ensure that requirements are clear.</p> <p>Resources</p> <p>To learn more, the best place to start is https://www.tutorialspoint.com/business_analysis/business_analysis_tutorial.pdf</p>"},{"location":"BA/Requirement_gathering/","title":"Requirement Gathering","text":"<p>Requirement gathering is a process of understanding what needs to be developed and the reason behind developing the product or services. Basically, as a business analyst, your role is to understand the pain point of the client and the problems they are facing in the current environment. Thus, understanding why they want to build a product or a service in place. Defining the project requirement\u2019s scope and goals early on during the project initiation can help you solve the risk factors and issues much more intuitively than without proper understanding.</p> <p>Business analysts, system analysts, product owners, and project managers are mainly responsible for meeting with stakeholders and clients and jotting down the project\u2019s requirements, goals, and scope.</p> <p></p>"},{"location":"BA/Requirement_gathering/#stages-of-requirement-gathering","title":"Stages of Requirement Gathering","text":"<p>Gathering business requirements is the critical step for the project. A business analyst needs to thoroughly understand the business needs and align them with business objectives to bridge the gap between business and technical requirements. Also, a responsible BA has to communicate the needs to the stakeholders and the development team.</p> <p>Following are the stages of requirement gathering:</p> <ul> <li>Identify the right stakeholders</li> <li>Define the Project: Understand the project goals and scope</li> <li>Elicit the requirements from the stakeholders</li> <li>Document the requirements</li> <li>Confirm the Requirements with the client and stakeholders to ensure transparency</li> <li>Prioritize the needs based on discussion with the clients</li> </ul>"},{"location":"BA/Requirement_gathering/#identify-the-right-stakeholders","title":"Identify the right Stakeholders","text":"<p>Project stakeholders are those who are impacted by the project outcomes. These may include:</p> <ul> <li>Senior Managers</li> <li>End-Users</li> <li>Marketing Department</li> <li>Subject Matter Experts</li> <li>Engineering Team</li> <li>Product Owners</li> <li>Suppliers</li> <li>Other partners and associations</li> </ul> <p></p>"},{"location":"BA/Requirement_gathering/#requirement-elicitation","title":"Requirement Elicitation","text":"<p>Requirement elicitation is a process of gathering the correct information from the internal and external stakeholders. Requirement elicitation can be performed in several ways: </p> <ul> <li>Surveys</li> <li>Questionnaires</li> <li>Interviews</li> <li>One-on-one meetings</li> <li>User stories</li> <li>Brainstorming sessions</li> <li>Process diagramming</li> <li>Follow-Up Meetings</li> <li>Workshops etc</li> </ul>"},{"location":"BA/SDLC/","title":"Software Development Lifecycle.","text":"<p>A software life cycle model (also termed process model) is a pictorial and diagrammatic representation of the software life cycle. A life cycle model represents all the methods required to make a software product transit through its life cycle stages. It also captures the structure in which these methods are to be undertaken.</p> <p>In other words, a life cycle model maps the various activities performed on a software product from its inception to retirement. Different life cycle models may plan the necessary development activities to phases in different ways. Thus, no element which life cycle model is followed, the essential activities are contained in all life cycle models though the action may be carried out in distinct orders in different life cycle models. During any life cycle stage, more than one activity may also be carried out.</p> <p></p> <p>Resources</p> <p>To learn more, the best place to start is https://theproductmanager.com/topics/software-development-life-cycle/</p>"},{"location":"BA/Documentation/brd/","title":"Documentation","text":"<p>Documentation is about communicating through various medias and finding the best way to convey an idea. And there are 5 quick skills you can learn to be better at documentation:</p> <ul> <li>Clarity, concision, and precision</li> <li>Speak the language (vocabulary)</li> <li>Interpretation &amp; Reading Between the Lines</li> <li>JIRA and confluence knowledge</li> <li>Use of pictures</li> </ul> <p>Resources</p> <p>To learn more, the best place to start is https://www.analyticsvidhya.com/blog/2021/09/important-documents-prepared-by-a-business-analyst/</p>"},{"location":"BA/Documentation/brd/#business-requirements-documentbrd","title":"Business Requirements Document(BRD)","text":"<p>A Business Requirement Document is created to describe the business requirements of a product/process and the intended end result that is expected from the product/process. It is one of the most widely accepted project requirement documents and is referred to throughout the development life-cycle for any project.</p> <p>A BRD mainly focuses on answering \u2018what is the business solution\u2019 as opposed to \u2018how to achieve the business solution\u2019 and thus, it\u2019s mainly centered around the business requirements.</p> <p>A BRD is created with the help of the project team (BA, client, subject matter experts, business partners) and is also used as a communication tool for other stakeholders/external service providers.</p> <p>The Business Requirement Document contains:</p> <ul> <li>Project Background</li> <li>Business goals and objectives</li> <li>Stakeholders</li> <li>Requirement scope</li> <li>Functional requirements</li> <li>Data requirements</li> <li>Non-functional requirements</li> <li>Interface requirements</li> <li>Business glossary/Definitions</li> <li>Dependencies of existing systems</li> <li>Assumptions</li> </ul>"},{"location":"BA/Documentation/dfd/","title":"Data Flow Diagram(DFD)","text":"<p>A data flow diagram (DFD) is a visual representation of the information flow through a process or system. DFDs help you better understand process or system operation to discover potential problems, improve efficiency, and develop better processes. They range from simple overviews to complex, granular displays of a process or system.</p> <p>Data Flow Diagram symbols are standardized notations, like rectangles, circles, arrows, and short-text labels, that describe a system or process\u2019 data flow direction, data inputs, data outputs, data storage points, and its various sub-processes. There are four common methods of notation used in DFDs: Yourdon &amp; De Marco, Gene &amp; Sarson, SSADM and Unified. All use the same labels and similar shapes to represent the four main elements of a DFD \u2014 external entity, process, data store, and data flow.</p> <p></p> <p>Levels of Data Flow Diagrams</p> <p>DFDs can range from simple overviews to complex, granular representations of a system or process with multiple levels, starting with level 0. The most common and intuitive DFDs are level 0 DFDs, also called context diagrams. They\u2019re digestible, high-level overviews of the flow of information through a system or process, so almost anyone can understand it.</p> <ul> <li> <p>Level 0: Context Diagram This DFD level focuses on high-level system processes or functions and the data sources that flow to or from them. Level 0 diagrams are designed to be simple, straightforward overviews of a process or system.</p> </li> <li> <p>Level 1: Process Decomposition While level 1 DFDs are still broad overviews of a system or process, they\u2019re also more detailed \u2014 they break down the system\u2019s single process node into subprocesses.</p> </li> <li> <p>Level 2: Deeper Dives The next level of DFDs dive even deeper into detail by breaking down each level 1 process into granular subprocesses.</p> </li> <li> <p>Level 3: Increasing Complexity Level 3 and higher-numbered DFDs are uncommon. This is largely due to the amount of detail required, which defeats its original purpose of being easy to understand.</p> </li> </ul> <p>Resources</p> <p>To learn more, the best place to start is https://www.lucidchart.com/pages/data-flow-diagram/how-to-make-a-dfd</p>"},{"location":"BA/Documentation/documentation/","title":"Documentation","text":"<p>Documentation is about communicating through various medias and finding the best way to convey an idea. And there are 5 quick skills you can learn to be better at documentation:</p> <ul> <li>Clarity, concision, and precision</li> <li>Speak the language (vocabulary)</li> <li>Interpretation &amp; Reading Between the Lines</li> <li>JIRA and confluence knowledge</li> <li>Use of pictures</li> </ul> <p>Resources</p> <p>To learn more, the best place to start is https://www.analyticsvidhya.com/blog/2021/09/important-documents-prepared-by-a-business-analyst/</p>"},{"location":"BA/Documentation/er/","title":"Entity Relationship(ER) Diagram","text":"<p>An Entity Relationship (ER) Diagram is a type of flowchart that illustrates how \u201centities\u201d such as people, objects or concepts relate to each other within a system. ER Diagrams are most often used to design or debug relational databases in the fields of software engineering, business information systems, education and research. Also known as ERDs or ER Models, they use a defined set of symbols such as rectangles, diamonds, ovals and connecting lines to depict the interconnectedness of entities, relationships and their attributes. They mirror grammatical structure, with entities as nouns and relationships as verbs.</p> <p>ER diagrams are related to data structure diagrams (DSDs), which focus on the relationships of elements within entities instead of relationships between entities themselves. ER diagrams also are often used in conjunction with data flow diagrams (DFDs), which map out the flow of information for processes or systems.</p> <p>Resources</p> <p>To learn more, the best place to start is https://www.lucidchart.com/pages/er-diagrams/a&gt;"},{"location":"BA/Documentation/flowchart/","title":"Flowchart","text":"<p>A flowchart is a diagram that depicts a process, system or computer algorithm. </p> <p>They are widely used in multiple fields to document, study, plan, improve and communicate often complex processes in clear, easy-to-understand diagrams. Flowcharts, sometimes spelled as flow charts, use rectangles, ovals, diamonds and potentially numerous other shapes to define the type of step, along with connecting arrows to define flow and sequence. They can range from simple, hand-drawn charts to comprehensive computer-drawn diagrams depicting multiple steps and routes. </p> <p>If we consider all the various forms of flowcharts, they are one of the most common diagrams on the planet, used by both technical and non-technical people in numerous fields. Flowcharts are sometimes called by more specialized names such as Process Flowchart, Process Map, Functional Flowchart, Business Process Mapping, Business Process Modeling and Notation (BPMN),  or Process Flow Diagram (PFD). They are related to other popular diagrams, such as Data Flow Diagrams (DFDs) and Unified Modeling Language (UML) Activity Diagrams.</p> <p>Resources</p> <p>To learn more, the best place to start is https://www.lucidchart.com/pages/what-is-a-flowchart-tutorial</p>"},{"location":"BA/Documentation/user_stories/","title":"User Stories","text":"<p>In an agile development environment, a user story is a document describing the functionality a business system should provide and are written from the perspective of an end-user/customer/client.</p> <p>The user stories are not very descriptive and only captures \u2018who\u2019, \u2018what\u2019 and \u2018why\u2019 of a requirement in limited detail. If any requirement is too big for a single user story, it\u2019s broken down into a number of user stories making it easier for estimation and discussion. In such cases, the main user story will act as an Epic (parent) user story.</p> <p>Some examples of user stories are: - The system shall be able to sort the values in ascending and descending order - The application must allow the user to enter his name, date of birth, and address. - The system shall verify the user\u2019s login credentials and redirect him to the dashboard in case of a successful login.</p>"},{"location":"BA/Software_Engineering_Models/agile/","title":"Agile Methodology","text":"<p>Agile is an approach to software development that seeks the continuous delivery of working software created in rapid iterations. </p> <p>However, the phrase \"agile methodology\" is misleading because it implies that agile is a singular approach to software development. Agile is not a set of prescriptions for exactly which actions to take in software development. Instead, it is a way of thinking about collaboration and workflows and it is a set of values which guide our choices in regards to what we make and how we make it.</p> <p>In practical terms, agile software development methodologies are all about delivering small pieces of working software quickly to improve customer satisfaction. These methodologies use adaptive approaches and teamwork to focus on continuous improvement. Usually, agile software development consists of small, self-organizing teams of software developers and business representatives regularly meeting in-person throughout the software development life cycle. Agile favors a lightweight approach to software documentation and embraces\u2014rather than resists\u2014changes at any stage of the life cycle.</p> <p></p> <p>Resources</p> <p>To learn more, the best place to start is https://www.redhat.com/en/topics/devops/what-is-agile-methodology</p>"},{"location":"BA/Software_Engineering_Models/iterative/","title":"Iterative Model","text":"<p>The Iterative Model relies on specifying and implementing individual parts of the software, rather than attempting to start with full specification requirements. Once a rough product is created within an iteration, it is then reviewed and improved in the next iteration and so on. The Iterative Model relies on the whole product being developed step-by-step (Design/Develop, Test, Implement).</p> <p></p>"},{"location":"BA/Software_Engineering_Models/kanban/","title":"Kanban Model","text":"<p>Unlike the other models, Kanban does not have pronounced iterations. If a team does plan iterations, they are incredibly short sprints, sometimes as short as one day.</p> <p>A Kanban board with sticky notes is used to visually outline the projects and their details, including project owners and progress status. This visualization allows the team to narrow concentration on the most important feature in development at the moment.</p> <p>Additionally, the Kanban board highlights the room remaining for continual improvement to perfection of features.</p> <p>Although the method of sticky notes on a board helps motivate the team to focus on perfecting the important task at hand, it is a poor way to define and maintain timeframes. For this reason, planning long projects is very difficult.</p> <p>Since there is no set planning stage, changes can be made at any time. One common disadvantage of Kanban is the lack of timeframes. This issue can be accentuated if changes are made continually.</p> <p></p> <p>Resources</p> <p>To learn more, the best place to start is https://flexagon.com/blog/7-software-development-models-you-should-know/</p>"},{"location":"BA/Software_Engineering_Models/rad/","title":"RAD Model","text":"<p>RAD or Rapid Application Development process is an adoption of the waterfall model; it targets developing software in a short period. The RAD model is based on the concept that a better system can be developed in lesser time by using focus groups to gather system requirements.</p> <ul> <li>Business Modeling</li> <li>Data Modeling</li> <li>Process Modeling</li> <li>Application Generation</li> <li>Testing and Turnover</li> </ul> <p></p>"},{"location":"BA/Software_Engineering_Models/scrum/","title":"Scrum Model","text":"<p>The Scrum model is the most popular Agile model. Its iterations of software development are known as sprints. During these 1-4 weeklong sprints, teams assess the previous sprint, add new features (coded and tested functionality), and plan the next sprint. Changes are not allowed after the sprint\u2019s activities are defined.</p> <p>After each sprint, new features/items are added to be coded and tested in the next sprint. This occurs until all features have been added and the project is deemed ready for release.</p> <p>Increased collaboration between cross-functional teams and between the organization and the customer reduces the guesswork and errors that often result from insufficient communication. Additionally, the incremental stages decrease time to market.</p> <p>Enhanced communication reduces time spent resolving errors and increases the likelihood of the end user being satisfied with the product. However, this collaboration does require more input and time from the customer during the process. If too many features are requested and added, the team risks pushing back deadlines.</p> <p></p>"},{"location":"BA/Software_Engineering_Models/spiral/","title":"Spiral Model","text":"<p>The spiral model is a risk-driven process model. This SDLC model helps the group to adopt elements of one or more process models like a waterfall, incremental, waterfall, etc. The spiral technique is a combination of rapid prototyping and concurrency in design and development activities.</p> <p>Each cycle in the spiral begins with the identification of objectives for that cycle, the different alternatives that are possible for achieving the goals, and the constraints that exist. This is the first quadrant of the cycle (upper-left quadrant).</p> <p>The next step in the cycle is to evaluate these different alternatives based on the objectives and constraints. The focus of evaluation in this step is based on the risk perception for the project.</p> <p>The next step is to develop strategies that solve uncertainties and risks. This step may involve activities such as benchmarking, simulation, and prototyping.</p> <p></p>"},{"location":"BA/Software_Engineering_Models/v-model/","title":"The V-Model","text":"<p>The V-model, or Validation and Verification model, expands on the Waterfall model with the addition of early test planning. Instead of moving down linearly through the software development stages, the V-Model moves down until the coding phase when it pivots and begins to ascend upward to form a \u201cV\u201d shape.</p> <p>Each development stage has a corresponding testing activity. This allows the team to detect errors in requirement specifications, code, and architecture early in the development of the project. Unfortunately, fixing errors is still difficult and expensive as there is not a clear path for resolving these problems.</p> <p>The addition of early test planning gives the V-Model a greater chance of success than that of the Waterfall model. However, the V-Model is still linear, making it inflexible.</p> <p>Like the Waterfall model, a team can only start the next stage when the current stage is complete. This makes adjustments difficult, expensive, and time-intensive.</p> <p>Therefore, this model is best for short projects with fixed, clearly defined, documented requirements, but it is not ideal for long, complex, or ongoing projects.</p> <p></p>"},{"location":"BA/Software_Engineering_Models/waterfall/","title":"Waterfall Model","text":"<p>The classical waterfall model is the basic software development life cycle model. It is very simple but idealistic. Earlier this model was very popular but nowadays it is not used. But it is very important because all the other software development life cycle models are based on the classical waterfall model. </p> <p>The classical waterfall model divides the life cycle into a set of phases. This model considers that one phase can be started after the completion of the previous phase. That is the output of one phase will be the input to the next phase. Thus the development process can be considered as a sequential flow in the waterfall. Here the phases do not overlap with each other. </p> <p>The different sequential phases of the classical waterfall model are shown in the below figure: </p> <p></p>"},{"location":"BA/Testing/uat/","title":"User Acceptance Testing","text":"<p>User Acceptance Testing (UAT) is a type of testing performed by the end user or the client to verify/accept the software system before moving the software application to the production environment. UAT is done in the final phase of testing after functional, integration and system testing is done.</p> <p>Purpose of UAT The main Purpose of UAT is to validate end to end business flow. It does not focus on cosmetic errors, spelling mistakes or system testing. User Acceptance Testing is carried out in a separate testing environment with production-like data setup. It is kind of black box testing where two or more end-users will be involved.</p> <p>UAT is done by the intended users of the system or software. This type of Software Testing usually happens at the client location which is known as Beta Testing. Once Entry criteria for UAT are satisfied, following are the tasks need to be performed by the testers:</p>"},{"location":"BA/Tools/confluence/","title":"Confluence","text":"<p>Create, collaborate, and organize all your work in one place. Confluence is a team workspace where knowledge and collaboration meet. Dynamic pages give your team a place to create, capture, and collaborate on any project or idea. Spaces help your team structure, organize, and share work, so every team member has visibility into institutional knowledge and access to the information they need to do their best work. Confluence is for teams of any size and type, from those with mission-critical, high-stakes projects that need rigor behind their practices, to those that are looking for a space to build team culture and engage with one another in a more open and authentic way. Equipped with Confluence, your team can make quick decisions, gain alignment, and accomplish more together. </p>"},{"location":"BA/Tools/confluence/#key-terms","title":"Key Terms","text":"<pre><code>- Page\n</code></pre> <p>Your content lives in pages \u2013 living documents you create on your Confluence site. You can create pages for almost anything, from project plans to meeting notes, troubleshooting guides, policies, and more. Confluence comes bundled with templates to help you make beautiful pages for almost any kind of content. If you can\u2019t find a template for the type of content you want to create, you can always start with a blank page.</p> <pre><code>- Space\n</code></pre> <p>Pages are stored in spaces \u2013 workspaces where you can collaborate on work and keep all your content organized. It\u2019s best to group related content together in the same space, but you can create as many or as few spaces as your team needs. For example, one marketing team might keep all of its work in one space, with a page for each campaign, while another might set up a separate space for every single campaign. Each space comes with an overview (or homepage) and a blog, so it\u2019s easy to share updates and announcements with your whole team.</p> <pre><code>- Page tree\n</code></pre> <p>Organize space content with a hierarchical page tree that makes finding work quick and easy. Nest pages under related spaces and pages to organize pages in just about any way.</p>"},{"location":"BA/Tools/jira/","title":"JIRA","text":"<p>Jira is a suite of agile work management solutions that powers collaboration across all teams from concept to customer, empowering you to do the best work of your life, together. Jira offers several products and deployment options that are purpose-built for Software, IT, Business, Ops teams, and more. Read on to see which is right for you.</p>"},{"location":"BA/Tools/jira/#key-terms","title":"Key terms","text":"<pre><code>- Issues\n</code></pre> <p>A Jira 'issue' refers to a single work item of any type or size that is tracked from creation to completion. For example, an issue could be a feature being developed by a software team, a to-do item for a marketing team, or a contract that needs to be written by a legal team.</p> <p>\ud83d\udca1Tip: Other commonly used terms for issues are 'requests', 'tickets' or 'tasks'. We recommend using 'issues' to help your team stay on the same page when working across the Jira product family. </p> <pre><code>- Projects\n</code></pre> <p>A project is, quite simply, a collection of issues that are held in common by purpose or context. Issues grouped into projects can be configured in a variety of ways, ranging from visibility restrictions to available workflows.</p> <p>Jira Software projects are flexible working spaces that allow you to group like issues by team, business unit, product, or stream of work. Projects don't need to be tied to the same delivery date. </p> <p>For example, if you group your issues by team, you could have a marketing project, a development project, and a legal project, all of which would track ongoing work of those particular teams. Every issue would be represented by an issue keys (specific to a project) and an issue number, i.e. MKT-13, DEV-4, LEG-1.</p> <pre><code>- Boards\n</code></pre> <p>A board in Jira software is a part of a project that displays issues giving teams a flexible way to view, manage, and reporting on work in progress. Simply put, a board is a visual representation of a team\u2019s workflow within a project.</p> <pre><code>- Agile\n</code></pre> <p>Agile is not a Jira Software-specific term. It's a work philosophy that originated in the software development field and has since expanded to a variety of other industries. While we won't belabor the definition here (there are great agile resources for that!), agile emphasizes an iterative approach to work informed by customer feedback where delivery occurs incrementally and continuously. </p> <p>The ideal agile team can move quickly and adapt to changing requirements without missing much of a beat.</p>"},{"location":"BA/Tools/jira/#sprint-planning","title":"Sprint Planning","text":"<p>Sprint planning is an event in scrum that kicks off the sprint. The purpose of sprint planning is to define what can be delivered in the sprint and how that work will be achieved. Sprint planning is done in collaboration with the whole scrum team. In scrum, the sprint is a set period of time where all the work is done. However, before you can leap into action you have to set up the sprint. You need to decide on how long the time box is going to be, the sprint goal, and where you're going to start.</p> <p>The sprint planning session kicks off the sprint by setting the agenda and focus. If done correctly, it also creates an environment where the team is motivated, challenged, and can be successful. Bad sprint plans can derail the team by setting unrealistic expectations.</p>"},{"location":"Flutter/","title":"Flutter","text":"<p>Flutter is an open source framework by Google for building beautiful, natively compiled applications. It is used to develop cross platform applications for Android, iOS, Linux, macOS, Windows, Google Fuchsia, and the web from a single codebase. </p> <p>Flutter code compiles to ARM or Intel machine code as well as JavaScript, for fast performance on any device. Take control of your codebase with automated testing, developer tooling, and everything else you need to build production-quality apps</p>"},{"location":"Flutter/basics_of_dart/","title":"Dart","text":"<p>Dart is a programming language designed for client development, such as for the web and mobile apps. It is developed by Google and can also be used to build server and desktop applications. It is an object-oriented, class-based, garbage-collected language with C-style syntax.</p>"},{"location":"Flutter/basics_of_dart/#sound-null-safety","title":"Sound null safety","text":"<p>Now Dart language supports sound null safety. When you opt into null safety, types in your code are non-nullable by default, meaning that variables can\u2019t contain null unless you say they can. With null safety, your runtime null-dereference errors turn into edit-time analysis errors.</p> <p>If you want a variable of type String to accept any string or the value null, give the variable a nullable type by adding a question mark (?) after the type name. For example, a variable of type String? can contain a string, or it can be null.</p> <p>Resources</p> <p>To know more about Dart null sound safety, head over to the official codelab..</p> <p>To try official online Dart compiler, click here.</p>"},{"location":"Flutter/basics_of_dart/#asynchronous-programming","title":"Asynchronous programming","text":"<p>Asynchronous operations let your program complete work while waiting for another operation to finish. Here are some common asynchronous operations:</p> <p>\u25cf   Fetching data over a network. </p> <p>\u25cf   Writing to a database. </p> <p>\u25cf   Reading data from a file. </p> <p>Such asynchronous computations usually provide their result as a Future or, if the result has multiple parts, as a Stream. These computations introduce asynchrony into a program. To accommodate that initial asynchrony, other plain Dart functions also need to become asynchronous.</p> <p>To interact with these asynchronous results, you can use the async and await keywords. Most asynchronous functions are just async Dart functions that depend, possibly deep down, on an inherently asynchronous computation.</p> <pre><code>// Exapmle\n\nFuture&lt;void&gt; fetchUserOrder() {\n    // Imagine that this function is fetching user info from another service or database.\n    return Future.delayed(const Duration(seconds: 2), () =&gt; print('Large Latte'));\n}\n\nvoid main() {\n    fetchUserOrder();\n    print('Fetching user order...');\n}\n</code></pre> <p>Output: </p> <pre><code>Fetching user order...\nLarge Latte\n</code></pre> <p>Resources</p> <p>To know more about Asynchronous programming, read official documentation.</p>"},{"location":"Flutter/introduction_to_widgets/","title":"Widgets","text":"<p>Flutter widgets are built using a modern framework that takes inspiration from React. The central idea is that you build your UI out of widgets. Widgets describe what their view should look like given their current configuration and state.</p> <p>When a widget\u2019s state changes, the widget rebuilds its description, which the framework diffs against the previous description in order to determine the minimal changes needed in the underlying render tree to transition from one state to the next.</p> <p>The minimal Flutter app simply calls the runApp() function with a widget:</p> <pre><code>import 'package:flutter/material.dart';\n\nvoid main() {\nrunApp(\n    const Center(\n    child: Text(\n        'Hello, world!',\n        textDirection: TextDirection.ltr,\n    ),\n    ),\n);\n}\n</code></pre> <p>The runApp() function takes the given Widget and makes it the root of the widget tree. In this example, the widget tree consists of two widgets, the Center widget and its child, the Text widget. The framework forces the root widget to cover the screen, which means the text \u201cHello, world\u201d ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.</p>"},{"location":"Flutter/introduction_to_widgets/#basic-widgets","title":"Basic widgets","text":"<p>Flutter comes with a suite of powerful basic widgets, of which the following are commonly used:</p>"},{"location":"Flutter/introduction_to_widgets/#text","title":"Text","text":"<p>The Text widget lets you create a run of styled text within your application.</p>"},{"location":"Flutter/introduction_to_widgets/#row-column","title":"Row, Column","text":"<p>These flex widgets let you create flexible layouts in both the horizontal (Row) and vertical (Column) directions. The design of these objects is based on the web\u2019s flexbox layout model.</p>"},{"location":"Flutter/introduction_to_widgets/#stack","title":"Stack","text":"<p>Instead of being linearly oriented (either horizontally or vertically), a Stack widget lets you place widgets on top of each other in paint order. You can then use the Positioned widget on children of a Stack to position them relative to the top, right, bottom, or left edge of the stack. Stacks are based on the web\u2019s absolute positioning layout model.</p>"},{"location":"Flutter/introduction_to_widgets/#container","title":"Container","text":"<p>The Container widget lets you create a rectangular visual element. A container can be decorated with a BoxDecoration, such as a background, a border, or a shadow. A Container can also have margins, padding, and constraints applied to its size. In addition, a Container can be transformed in three dimensional space using a matrix.</p>"},{"location":"Flutter/introduction_to_widgets/#below-example-combine-these-and-other-widgets","title":"Below example combine these and other widgets:","text":"<pre><code>import 'package:flutter/material.dart';\n\nclass MyAppBar extends StatelessWidget {\nconst MyAppBar({required this.title, super.key});\n\n// Fields in a Widget subclass are always marked \"final\".\n\nfinal Widget title;\n\n@override\nWidget build(BuildContext context) {\n    return Container(\n    height: 56.0, // in logical pixels\n    padding: const EdgeInsets.symmetric(horizontal: 8.0),\n    decoration: BoxDecoration(color: Colors.blue[500]),\n    // Row is a horizontal, linear layout.\n    child: Row(\n        children: [\n        const IconButton(\n            icon: Icon(Icons.menu),\n            tooltip: 'Navigation menu',\n            onPressed: null, // null disables the button\n        ),\n        // Expanded expands its child\n        // to fill the available space.\n        Expanded(\n            child: title,\n        ),\n        const IconButton(\n            icon: Icon(Icons.search),\n            tooltip: 'Search',\n            onPressed: null,\n        ),\n        ],\n    ),\n    );\n}\n}\n\nclass MyScaffold extends StatelessWidget {\nconst MyScaffold({super.key});\n\n@override\nWidget build(BuildContext context) {\n    // Material is a conceptual piece\n    // of paper on which the UI appears.\n    return Material(\n    // Column is a vertical, linear layout.\n    child: Column(\n        children: [\n        MyAppBar(\n            title: Text(\n            'Example title',\n            style: Theme.of(context) //\n                .primaryTextTheme\n                .headline6,\n            ),\n        ),\n        const Expanded(\n            child: Center(\n            child: Text('Hello, world!'),\n            ),\n        ),\n        ],\n    ),\n    );\n}\n}\n\nvoid main() {\nrunApp(\n    const MaterialApp(\n    title: 'My app', // used by the OS task switcher\n    home: SafeArea(\n        child: MyScaffold(),\n    ),\n    ),\n);\n}\n</code></pre> <p>Output:</p> <p> <p>Resources</p> <p>For more examples on widget, read official documentation.</p>"},{"location":"Flutter/state_management/","title":"State management","text":""},{"location":"Flutter/state_management/#what-is-the-state","title":"What is the state?","text":"<p>When a user interacts with an application, some information needs to be changed and the UI needs to be rebuilt at that moment, that information, which is necessary to reflect changes is called the State of application at that moment.</p>"},{"location":"Flutter/state_management/#what-is-state-management","title":"What is State Management?","text":"<p>Whether you are building web applications or mobile applications, State Management is the key for managing application views.</p> <p>State Management is the strategic approach to manage all the interactions that a user performs on an application and then reflect those changes to UI, update databases, server requests etc. Any application has many UI controls such as text fields, radio buttons, buttons, checkboxes, dropdowns etc. State management refers to handling the states of such UI controls as most of the time one or more UI controls are depending on one-another, based on business logic requirements.</p> <p>Every development framework has its own unique way to efficiently perform state management. Like Flutter, many frameworks have more than one approach.</p>"},{"location":"Flutter/state_management/#why-is-state-management-important","title":"Why is State Management important?","text":"<p>State Management reflects the efficiency of the system and the care taken by developers to build that system so that every functionality and feature performs smoothly and precisely.</p> <p>State management helps to align and integrate the core business logic inside the application with servers and databases. Without proper state management burden on users will increase and that would certainly decrease the effectiveness of an application.</p> <p>As well as by centralizing everything with State management, it will be easier to maintain a code base and will in-turn improve the code-quality and readability.</p>"},{"location":"Flutter/state_management/#conceptual-types-of-states","title":"Conceptual Types of States","text":"<p>At any point in time of the flutter application lifecycle, your application will be in either of two below states :</p> <p>a. Local / Ephemeral State</p> <p>b. Shared / App state</p>"},{"location":"Flutter/state_management/#local-state","title":"Local State","text":"<p>Whenever you need to change the state of a single page view which may contain UI controls or animation then it is considered as a local state. You can easily do that using the Stateful widget.</p>"},{"location":"Flutter/state_management/#shared-app-state","title":"Shared App State","text":"<p>Whenever you need to change the state of multiple widgets which are shared across your application then it is Share app State.</p> <p>Resources</p> <p>To know more about different state management Techniques, read official documentation.</p>"},{"location":"Flutter/stateful_and_stateless_widgets/","title":"Stateful and stateless widgets","text":"<p>A widget is either stateful or stateless. If a widget can change\u2014when a user interacts with it, for example\u2014it\u2019s stateful.</p> <p>A stateless widget never changes. Icon, IconButton, and Text are examples of stateless widgets. Stateless widgets subclass StatelessWidget.</p> <p>A stateful widget is dynamic: for example, it can change its appearance in response to events triggered by user interactions or when it receives data. Checkbox, Radio, Slider, InkWell, Form, and TextField are examples of stateful widgets. Stateful widgets subclass StatefulWidget.</p> <p>A widget\u2019s state is stored in a State object, separating the widget\u2019s state from its appearance. The state consists of values that can change, like a slider\u2019s current value or whether a checkbox is checked. When the widget\u2019s state changes, the state object calls setState(), telling the framework to redraw the widget.</p>"},{"location":"Flutter/stateful_and_stateless_widgets/#stateless-widget","title":"Stateless widget","text":"<p>Stateless widgets do not require mutable state, i.e., it is immutable.</p> <p>In simple words, Stateless widgets cannot change their state during the runtime of the app, which means the widgets cannot be redrawn while the app is in action.</p> <p>The structure of a Stateless widget looks like this:</p> <p></p> <p>So, let\u2019s understand what is there in this small code snippet.</p> <p>The name of this Stateless Widget is \u201cStartScreen\u201d, inside which we have to override the \u201cbuild\u201d method. This build method takes in a \u201cBuildContext\u201d as the parameter and returns a widget. That\u2019s why you can see that the return type of the build method is a widget. And this the place where you can design the UI of this screen, which is Stateless.</p> <p>In Stateless widget, The \u201cbuild\u201d method can be called only ONCE while the app is in action, which is responsible for drawing the widgets on to the device screen.</p> <p>If you want to redraw the Stateless Widget, then you will need to create a new instance of the widget</p>"},{"location":"Flutter/stateful_and_stateless_widgets/#stateful-widget","title":"Stateful widget","text":"<p>Stateful widgets have a mutable state, i.e., they are mutable and can be drawn multiple times within its lifetime.</p> <p>They are the widgets which can change their state multiple times and can be redrawn on to the screen any number of times while the app is in action.</p> <p>The structure of a Stateful widget looks like this:</p> <p></p> <p>The name of the widget is again \u201cStartScreen\u201d, but now it overrides the \u201ccreateState\u201d method, instead of the \u201cbuild\u201d method, which returns the instance of the class \u201c_StartScreenState\u201d.</p> <p>The class \u201c_StartScreenState\u201d extends from State&lt;&gt; which takes \u201cStartScreen\u201d as a template input.</p> <p>Now, this \u201c_StartScreenState\u201d overrides the \u201cbuild\u201d method and returns a widget. This is where you can define the UI of the app, which is Stateful. As it is a Stateful widget you can call the build method any number of times, which will redraw the widgets on the screen.</p> <p>So, how can you call the build method? It\u2019s really easy, you can use the \u201csetState\u201d method to call the build method, which will, in turn, redraw the widgets. This is the most important method you will need to use with any Stateful widget, to really use the statefulness of the widget.</p> <p>Resources</p> <p>official documentation.</p>"},{"location":"MEAN/","title":"MEAN Stack","text":"<p>MEAN stands for Mongo/MySQL Express Angular NodeJs. Together these frameworks and tools work well and provide a really nice developer experience,  Hence they are often used together.</p> <p>Depending on the Application domain, a suitable database MySQL or Mongo be selected by the System Architect.</p> <p>After mastering the components, you will be able to build powerful and scalable systems and deploy them to a cloud environment of your choice.</p>"},{"location":"MEAN/css/","title":"Styling","text":"<p>CSS is the design language of the web. You need to know the basics before we can move to advanced concepts like SCSS.</p> <p>Resources</p> <p>The fasted way to get started with CSS would be w3schools</p> <p>Bootstrap makes it ridiculously simple for people not so keen on design to make something that's at least usable. It's really crucial to get acquainted with the basic classes for structure, forms and navigation that bootstrap offers.</p> <p>Bootstrap Basic that everyone must know:</p> <ul> <li>Grid</li> <li>Forms</li> </ul> <p>UI/UX Specialists have to go much deeper into this and will be expected to make experiences much superior to what bootstrap can offer.</p> <p>Resources</p> <p>Please read this document for a thorough introduction to CSS.</p>"},{"location":"MEAN/html/","title":"HTML","text":"<p>This is the heart of the web. The basic definition that gives structure to your web pages. Having a good understanding of HTML will help you regardless of which frontend framework you choose for developing your web app. Understanding the DOM is paramount for understanding anything related to frontend frameworks.</p> <p>Don't spend too much time on this as we'll likely use custom components in angular or react.</p> <p>We recommend that you brush up on your HTML5 fundamentals over here.</p>"},{"location":"MEAN/html/#dom","title":"DOM","text":"<p>The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web.</p> <p>We strongly advise you to clarify your grasp of DOM. Please read this documentation for more information.</p> <p>Resources</p> <p>The best resource for learning or brushing up on html would be w3schools &amp; CSS tricks.</p>"},{"location":"MEAN/javascript/","title":"Javascript ES6","text":"<p>Javascript was initially only limited to the browser running very minimal functions, but today we can use Javascript to even on the backend using execution frameworks like nodeJs.</p> <p>This is great because you now don't have to master two languages (one for frontend and one for backend) to become a full stack engineer anymore.</p> <p>While node is not the best on performance on the server side, it can be tuned to be pretty good and will work for most scenarios.</p> <p>The wide range of open source packages available in npm makes it a really attractive choice for web development.</p> <p>There are a few crucial language features that you have to learn to write good code both on the frontend and backend.</p> <p>MDN is overall a good place to learn javascript.</p> <p>Pay special attention to the features listed below.</p>"},{"location":"MEAN/javascript/#dom-manipulation","title":"DOM manipulation","text":"<p>In website development, DOM stands for Document Object Model. It is a programming interface that allows us to create, change, or remove elements from a website document.</p> <p>DOM manipulation is when you use JavaScript to add, remove, and modify elements of a website. It is very common in web development.</p>"},{"location":"MEAN/javascript/#array-methods","title":"Array Methods","text":""},{"location":"MEAN/javascript/#promises","title":"Promises","text":"<p>A Quick Intro</p> <p>A bit more detailed demo</p> <p>Resources</p> <p>MDN has a good post on promises</p>"},{"location":"MEAN/javascript/#async-await","title":"Async / Await","text":"<p>Async / Await pattern is the natural extension of Promises and is nothing but syntactic sugar to make promises look condensed. Any promise by default can be treated as an async function call and thus, any promise returning function can be awaited.</p> <p>Promises in their native form have more control over parallel executions and should be preferred if concurrency is being considered to improve performance. It's harder to write concurrent tasks in the async/await syntax.</p> <p>Quick Video Here</p> <p>Resources</p> <p>MDN has a good post Async/Await</p>"},{"location":"MEAN/javascript/#rxjs","title":"RxJS","text":"<p>RxJS is an event processing pipeline. It's a an important tool to know before getting into Angular / React. Events can be subscribed at multiple places in an application and so, this becomes a very handy tool to use in multi-component architectures like angular. Using RxJS, you may end up writing significantly less boilerplate code to pass data around.</p> <p>Watch this video for a Quick Intro here</p> <p>Resources</p> <p>To master it, head over to the official page.</p>"},{"location":"MEAN/rest/","title":"REST APIs","text":"<p>Before we begin with writing backends with ExpressJs, a very quick introduction to what APIs are.</p> <p>REST is not the only way we can transfer data between backend and frontend, we can also use Sockets for real-time transfer, and even GraphQL which is essentially a single API parametrized to fulfill all use cases.</p> <p>Although REST still remains the most popular choice on the Web</p>"},{"location":"MEAN/scss/","title":"SCSS","text":"<p>SCSS is a preprocessor language that is interrupted or compiled into CSS. It is a special type of SASS(Syntactically Awesome Style Sheets). Scripting of SCSS is done in Saasscript. SCSS contains all the features of CSS with a few extra added on speciality features as well.</p> <p>Using SCSS, we can add many additional functionalities to CSS such as variables, nesting and more. All these additional functionalities can make writing CSS much easier and faster as compared to writing the traditional CSS.</p> <p>Resources</p> <p>The best resource for learning or brushing up on SCSS would be sass-lang.com.</p>"},{"location":"MEAN/typescript/","title":"Typescript","text":"<p>Typescript is the natural evolution of Javascript. Any javascript is by default valid typescript. Typescript optionally adds support for types such that variables once declared as a datatype like string cannot be re-assigned an integer value. This approach can catch potential errors while developing itself, thus avoiding sleepless nights debugging where things went wrong.</p> <p>All the features you've learned so far like Promises and Async/Await are all valid in Typescript as well.</p> <p>Typescript code is transpiled by <code>tsc</code> Typescript Compiler to native javascript.</p> <p>Watch the More detailed video here:</p>"},{"location":"MEAN/Angular/advanced-concepts/","title":"Advanced Angular Concepts","text":"<p>While these may be briefly touched on in the tour of heroes tutorial, internalizing the following concepts will differentiate you from average angular programmers.</p> <p>Routing</p> <p>https://angular.io/guide/router</p> <p>Dependency injection</p> <p>https://angular.io/guide/dependency-injection</p> <p>Lazy-loading</p> <p>https://angular.io/guide/lazy-loading-ngmodules</p>"},{"location":"MEAN/Angular/introduction/","title":"Angular","text":"<p>Angular comes in the class of frontend frameworks called SPAs (Single Page Applications). These are a class of frameworks where the entire frontend project is usually compiled in a single page and shipped with relevant JS / CSS bundles. Although you as a user may feel the routes changing eg, /about /contact-us, the routing is done by the index.html and not by any backend server.</p> <p>Using frontend frameworks and not vanilla js pages is the preferred way to build complex frontend projects. Angular is a lot more structured than react and is therefore our framework of choice.</p> <p>Using Agular, we can re-use components of a web page in different locations and add significant \"Brains\" to the frontend of the site.</p> <p>Resources</p> <p>To learn Angular, the best place to start is https://angular.io/</p> <p>Make sure to complete the Tour of Heroes Tutorial</p>"},{"location":"MEAN/Mongo/mongo/","title":"Mongo DB","text":"<p>Mongo is the most popular database of choice in the NoSQL sector. Mongo offers unique advantages in terms of fast-changing business requirements in data modeling</p> <p>Mongo is not suited for every use case, but it does offer significant advantages when entities are not very tightly coupled.</p> <p>Where there is Dynamic / Unknown size and structure of data choose mongo.</p> <p>We generally use MongoDB with mongoose ORM in expressjs projects. Express and Mongoose will be introduced in later chapters but you still need solid foundations in Mongo &amp; aggregation pipelines to really use them to the fullest.</p> <p>Course</p> <p>Best resource to learn MongoDB is this course https://university.mongodb.com/courses/M001/about</p>"},{"location":"MEAN/Mongo/mongoose/","title":"Mongoose","text":"<p>Mongoose is the preferred ODM for MongoDB. Although the node MongoDB driver is very advanced, we use mongoose for typed schema definitions, validations, and easy joining capabilities.</p> <p>Project Homepage</p> <p>https://mongoosejs.com/</p> <p>Schemas</p> <p>Schema Definitons</p> <p>https://mongoosejs.com/docs/guide.html#schemas</p> <p>Validation</p> <p>Document Validaton</p> <p>https://mongoosejs.com/docs/validation.html</p> <p>Populate</p> <p>Loading related documets (similar to MySql left join)</p> <p>https://mongoosejs.com/docs/populate.html#populate</p>"},{"location":"MEAN/MySQL/mysql/","title":"MySQL","text":"<p>Even after the rise of NoSQL databases, relational databases still have a place in this world and form the backbone of many transaction-oriented systems. They may lack the scalability of NoSQL but the advantages they offer in terms of relational design cannot be matched with any NoSQL database.</p> <p>We generally use MySQL with sequelize ORM in expressjs projects. Express and Sequelize will be introduced in later chapters but you still need solid foundations in SQL to really use them to the fullest.</p> <p>Resources</p> <p>The best place to get a good grasp on SQL concepts would be to follow the SQL tutorial on https://www.w3schools.com/sql/</p> <p>Course</p> <p>Complete this course https://www.coursera.org/learn/intro-sql</p>"},{"location":"MEAN/MySQL/sequelize/","title":"Sequelize JS","text":"<p>Sequelize is an ORM that helps your write queries for relational Databases. It supports Postgres, MySQL, SQLite, etc. Other popular ORMs are Prisma, TypeORM, etc.</p> <p>Defining models and validations and querying via them avoids smaller errors in development time. While it's possible to fire native queries also, it's highly recommended not to.</p> <p>Sequelize is particularly useful to join tables and return the result in nested JSON objects. This makes writing API logic very easy.</p> <p>Project Homepage</p> <p>https://sequelize.org/</p> <p>Sequelize CLI</p> <p>This small utility can help with getting started with sequelize in your express project very easily. It will lay out the scaffolds and create some primitive models to help you get started.</p> <p>https://www.npmjs.com/package/sequelize-cli</p> <p>Sequelize Guides</p> <p>This small utility can help with getting started with sequelize in your express project very easily. It will layout the scaffolds and create some primitive models to help you get started.</p> <p>https://sequelize.org/docs/v6/</p>"},{"location":"MEAN/MySQL/sequelize/#important-concepts-to-learn","title":"Important Concepts to learn","text":"<p>Ideally you should read the full guides section of the Sequelize project. But the concepts mentioned below are bare minimum that you should know.</p>"},{"location":"MEAN/MySQL/sequelize/#defining-models","title":"Defining Models","text":"<p>This is where you define individual tables and the columns they should have</p> <p>https://sequelize.org/docs/v6/core-concepts/model-basics/</p>"},{"location":"MEAN/MySQL/sequelize/#querying","title":"Querying","text":"<p>Basic Queries based on model definitions</p> <p>https://sequelize.org/docs/v6/core-concepts/model-querying-basics/</p>"},{"location":"MEAN/MySQL/sequelize/#validations","title":"Validations","text":"<p>Making models bullet-proof for production applications</p> <p>https://sequelize.org/docs/v6/core-concepts/validations-and-constraints/</p>"},{"location":"MEAN/MySQL/sequelize/#associations","title":"Associations","text":"<p>Linking models to each other via one to one, one to many or many to one relationships.</p> <p>https://sequelize.org/docs/v6/core-concepts/validations-and-constraints/</p>"},{"location":"MEAN/MySQL/sequelize/#eager-loading","title":"Eager Loading","text":"<p>Using linking defined in models to query across multiple tables for nested outputs.</p> <p>https://sequelize.org/docs/v6/advanced-association-concepts/eager-loading/</p>"},{"location":"MEAN/Node/express/","title":"Express","text":"<p>Express is a backend framework for nodeJS. It's really basic and un-opinionated, unlike other frameworks.</p> <p>Resources</p> <p>Express project website </p> <p>Making APIs expained here in a litte more detail.</p>"},{"location":"MEAN/Node/node/","title":"NodeJs","text":"<p>Node is an execution environment for Javascript, people often confuse it with express, which is only one of the possible serverside frameworks that are built on top of node. Node can be used to make GUI installable apps, and command line which has nothing to do with web and APIs also, but making APIs is generally the primary use case where developers choose node.</p> <p>npm stands for Node Package Manager which is a tool used to manage dependencies just like maven or Gradle for java or pip for python.</p> <p>Node always runs in a single process and thread by default. The way it's able to manage simultaneous connections is via something called Event Loop.</p> <p>This video goes over some basics of nodeJs</p> <p>You will not be able to fully appreciate the event loop till you've dived a little more into ES6 language features, so make sure you've completed that section first. This video does a really good job of explaining the event loop.</p>"},{"location":"Next/Intro/","title":"NextJS","text":"<p>We use NextJS to develop non-corporate / non-financial apps,  that don't have strong regulatory requirements to host in a particular region ect. Next behaves the best with vercel based deployments, in which we lack some finegrained conrols like VPC, public and private subnets ect.</p> <p>Next is highly optimized for landing pages, we can get some of the best lighthouse scores using next compared to Angular.</p> <p>In the following sections, we will explore the relevant tools and open souce libraries from the React Ecosystem which make us stick to best practises and our everyday tasks can be sped up.</p> <p>We don't use <code>create-react-app</code> schemantics for react projects as it's quite outdated. Even if the app does not require serverside rendering, we still use Next as it's highly optimized in code splitting and lazy loading.</p> <p>We use nextjs 14 with app router</p> <p>Do not follow any tutorials for older next versions or pages router as things are significantly differnet there.</p>"},{"location":"Next/Intro/#backend-or-no-backend","title":"Backend or no Backend ?","text":"<p>NextJS project has a place to put in API routes which means we don't have to create a seperate project for the backend like it's mandatory in Angular or Plain React.  But the backend capabilities of NextJS are limited and when we need to run a more complex backend which has features like :</p> <ul> <li>queues</li> <li>crons</li> <li>stateful connections to outside world with static ips</li> <li>redis</li> <li>wss / socketio</li> </ul> <p>We would need to run our own backend with express seperately. This means that out project will have 2 backends, one powered with express and one with nextjs.  There are many caveats in making this decision and many pros / cons have to be weighed which are always project specific.  This is outside the scope of a fresher and a senior will make these decisions.</p>"},{"location":"Next/Intro/#youtube-channels","title":"Youtube channels","text":"<p>Subscribe for good quality content on React + Next Ecosystem and to be constantly updated with new developments in the ecosystem.</p> <ul> <li>https://www.youtube.com/@ByteGrad </li> <li>https://www.youtube.com/@t3dotgg </li> </ul>"},{"location":"Next/forms/","title":"Forms","text":""},{"location":"Next/next/","title":"NextJS","text":"<p>Prerequisites</p> <p>Before starting with next, You need to know React</p> <ul> <li>React</li> </ul> <p>Do not continue ahead if you've not read throught these sections first, your experience ahead will be very poor if you don't understand the basics.</p>"},{"location":"Next/next/#learn-nextjs-app-router","title":"Learn NextJS app router","text":"<p>We recommend using only \"App Router\" as it's Next's newest and most supported structure for all future releases. Detailed documentation is availble on https://nextjs.org/docs/app </p> <p>Pages Router</p> <p>Pages router is the old way of building apps with nextjs, it's been discontinued for use within our company, but vercel has promised to support it with no plans for deprecation.</p>"},{"location":"Next/next/#test-your-understanding","title":"Test your understanding","text":"<p>Go through this video throughly, it's very easy to write bad &amp; low performance nextjs apps without realizing it. These are some common pitfalls with nextjs and you need to know what to use where.</p>"},{"location":"Next/orval/","title":"Orval","text":"<p>Orval is similar to <code>swagger-codegen</code>, but it's much more tuned to react ecosystem. Not only does it convert your swagger definition to usable apis, but it also wraps the call in <code>react-query</code></p> <p>Moreover, it can use your swagger definitions to create zod validators which are typesafe.</p>"},{"location":"Next/orval/#orvalconfigjs","title":"orval.config.js","text":"<pre><code>module.exports = {\n  api: {\n    input: \"./src/swagger/swagger.yaml\",\n    output: {\n      target: \"./src/swagger/lib/\",\n      mode: \"tags-split\",\n      schemas: \"./src/swagger/models/\",\n      client: \"react-query\",\n      override: {\n        mutator: {\n          path: './src/swagger/axios-instance.ts',\n          name: 'customInstance'\n        }\n      }\n    },\n  },\n  validators: {\n    input: \"./src/swagger/swagger.yaml\",\n    output: {\n      client: \"zod\",\n      mode: \"tags-split\",\n      target: \"./src/zod\",\n    },\n  },\n};\n</code></pre>"},{"location":"Next/react/","title":"React","text":"<p>Prerequisites</p> <p>Before starting with react, You need to know</p> <ul> <li>HTML</li> <li>CSS</li> <li>Javascript</li> <li>Typescript</li> <li>REST</li> </ul> <p>Do not continue ahead if you've not read throught these sections first, your experience ahead will be very poor if you don't understand the basics.</p>"},{"location":"Next/react/#getting-started","title":"Getting Started","text":"<p>Danger</p> <p>Avoid following video tutorials for getting started with react. A lot of videos dumb-down or skip-over some concepts which are important.</p>"},{"location":"Next/react/#1-react-getting-started","title":"1. React - Getting Started","text":"<p>Read through and follow along Quick Start and Tutorials, these are very good for beginners and also touch on advanced concepts verty well. https://react.dev/learn</p>"},{"location":"Next/react/#2-next-react-primer","title":"2. Next - React Primer","text":"<p>There is a great react foundations course offered by nextjs team https://nextjs.org/learn/react-foundations</p>"},{"location":"Next/react/#deep-dive-topics","title":"Deep Dive topics","text":"<p>Read these topics directly from react docs, they are very important</p> <ul> <li>https://react.dev/reference/react/useEffect     Understand dependencies &amp; cleanup well</li> <li>https://react.dev/reference/react/useState</li> </ul>"},{"location":"QA/","title":"Quality Assurance","text":"<p>Quality is defined as the product or services that should be \"fit for use and purpose.\"</p> <p>Quality is all about meeting the needs and expectations of customers concerning the functionality, design, reliability, durability, and price of the product.Quality assurance is part of the software development process which ensures that what you are giving is as per the requirements.</p> <p></p> <p>Software Testing is a method to check whether the actual software product matches expected requirements and to ensure that the software product is Defect free. It involves the execution of software/system components using manual or automated tools to evaluate one or more properties of interest. The purpose of software testing is to identify errors, gaps, or missing requirements in contrast to actual requirements.</p> <p>Resources</p> <p>To learn more, the best place to start is https://www.geeksforgeeks.org/software-testing-basics/</p>"},{"location":"QA/Automation/Cypress/","title":"Cypress","text":"<p>Cypress is a modern and complete end-to-end testing framework that aims at unifying web app testing regardless of the programming language used. It is a next-generation front-end testing tool constructed for the modern web. This tool addresses the critical pain points developers, and QA engineers used to face when testing modern applications.</p> <p>Resources</p> <p>Find more to learn on Cypress : https://docs.cypress.io/guides/overview/why-cypress#What-you-ll-learn</p>"},{"location":"QA/Automation/Introduction/","title":"Automation Testing","text":"<p>Automation Testing is a software testing technique that performs using special automated testing software tools to execute a test case suite.</p>"},{"location":"QA/Automation/Jest/","title":"Jest","text":"<p>Jest is a JavaScript testing framework designed to ensure the correctness of any JavaScript codebase. It allows you to write tests with an approachable, familiar, and feature-rich API that gives you results quickly. Jest is well-documented, requires little configuration, and can be extended to match your requirements.</p> <p>Resources</p> <p>Find more to learn on Jest : https://jestjs.io/</p>"},{"location":"QA/Automation/javascript/","title":"Javascript","text":"<p>JavaScript (js) is a lightweight object-oriented programming language that is used by several websites for scripting webpages. It is an interpreted, full-fledged programming language that enables dynamic interactivity on websites when applied to an HTML document.</p> <p>Pay special attention to the features listed below.</p>"},{"location":"QA/Automation/javascript/#dom-manipulation","title":"DOM manipulation","text":"<p>In website development, DOM stands for Document Object Model. It is a programming interface that allows us to create, change, or remove elements from a website document.</p> <p>DOM manipulation is when you use JavaScript to add, remove, and modify elements of a website. It is very common in web development.</p>"},{"location":"QA/Automation/javascript/#array-methods","title":"Array Methods","text":"<p>Resources</p> <p>Find more to learn on javascript : https://www.w3schools.com/whatis/whatis_js.asp</p>"},{"location":"QA/Automation/protractor/","title":"Protractor","text":"<p>Protractor is an open-source automation testing framework that is written using NodeJS. It offers combined end-to-end testing for web applications that are built using AngularJS. It supports both Angular and Non-Angular applications. </p> <p>Resources</p> <p>Find more to learn on Protractor : https://www.protractortest.org/#/</p>"},{"location":"QA/Certificates/certificate/","title":"Certification","text":"<p>For Zero to Hero in Testing World, Complete these Certifications.</p> <p>Note: Buy it when Courses are on offer , Price 499 or less.</p> <p>Course</p> <p>Best resource to learn Manual Testing is this course https://www.udemy.com/course/learn-software-testing-in-practical-become-a-qa-expert/</p> <p>Course</p> <p>Best resource to SQL is this course https://www.udemy.com/course/database-testing-tutorial/ </p> <p>Course</p> <p>Best resource to learn Postman is this course https://www.udemy.com/course/postman-api-automation-testing-with-javascript/</p> <p>Course</p> <p>Best resource to learn Jmeter is this course https://www.udemy.com/course/learn-jmeter-from-scratch-performance-load-testing-tool/</p> <p>Course</p> <p>Best resource to Git is this course https://www.udemy.com/course/learn-git-tutorial-bitbucket/</p> <p>Course</p> <p>Best resource to learn Cypress is this course https://www.udemy.com/course/cypress-tutorial/</p> <p>Course</p> <p>Best resource to learn Protractor is this course https://www.udemy.com/course/protractor-tutorial/ </p>"},{"location":"QA/Manual/Introduction/","title":"Manual Testing","text":"<p>Manual software testing is when human testers check the quality of a new application without using automation tools or scripting. The purpose is to identify bugs or defects, ensure the product is error-free, and check it conforms to specified functional requirements.</p> <p>The process compares the behavior of a software application (or one of its components or features) with the expected behavior which was defined in the initial phases of the software development life cycle (SDLC).</p>"},{"location":"QA/Manual/agile/","title":"Agile Methodology","text":"<p>Agile software development refers to software development methodologies centered around the idea of iterative development, where requirements and solutions evolve through collaboration between self-organizing cross-functional teams.</p>"},{"location":"QA/Manual/agile/#scrum-framework","title":"Scrum Framework","text":"<p>Scrum is a lightweight framework that helps people, teams, and organizations generate value through adaptive solutions for complex problems. </p> <p>Resources</p> <p>Find more to learn : https://www.guru99.com/agile-scrum-extreme-testing.html</p>"},{"location":"QA/Manual/api/","title":"API Testing.","text":"<p>API testing is a software testing practice that tests the APIs directly \u2014 from their functionality, reliability, and performance, to security. As part of integration testing, API testing effectively validates the logic of the build architecture within a short amount of time.</p>"},{"location":"QA/Manual/api/#network-tab","title":"Network Tab.","text":"<p>Resources</p> <p>Find more to learn on Network Tab: https://testmatick.com/what-we-can-test-in-the-network-tab/</p>"},{"location":"QA/Manual/dlc/","title":"Defect Lifecycle","text":"<p>Defect Life Cycle or Bug Life Cycle in software testing is the specific set of states that a defect or bug goes through in its entire life. The purpose of the Defect life cycle is to easily coordinate and communicate the current status of the defect which changes to various assignees and makes the defect fixing process systematic and efficient.</p> <p> </p> <p>Resources</p> <p>Find more to learn : https://www.geeksforgeeks.org/bug-life-cycle-in-software-development/</p>"},{"location":"QA/Manual/functional/","title":"Functional Testing.","text":"<p>Functional Testing is the process through which QAs determine if a piece of software is acting as per pre-determined requirements. It uses black-box testing techniques, in which the tester does not know the internal system logic. Functional testing is only concerned with validating if a system works as intended.</p> <p>Resources</p> <p>Find more to learn on Functional Testing : https://www.geeksforgeeks.org/software-testing-functional-testing/</p>"},{"location":"QA/Manual/functional/#blackbox-testing","title":"Blackbox Testing.","text":"<p>Black box testing is a technique of software testing which examines the functionality of the software without peering into its internal structure or coding. The primary source of black box testing is a specification of requirements that are stated by the customer.</p> <p>Resources</p> <p>Find more to learn on BlackBox Testing : https://www.geeksforgeeks.org/software-engineering-black-box-testing/</p>"},{"location":"QA/Manual/functional/#whitebox-testing","title":"Whitebox Testing.","text":"<p>White box testing is a testing technique, that examines the program structure and derives test data from the program logic/code.</p> <p>Resources</p> <p>Find more to learn on WhiteBox Testing : https://www.geeksforgeeks.org/software-engineering-white-box-testing/</p>"},{"location":"QA/Manual/functional/#positive-testing","title":"Positive Testing.","text":"<p>Positive testing is a method of checking if the application does what it is expected to do. When a software tester writes the test cases for a set of specified outputs, it is called as a positive test.</p>"},{"location":"QA/Manual/functional/#negative-testing","title":"Negative Testing.","text":"<p>Since positive testing is carried out against the valid inputs, negative testing is just the opposite.The application is validated against the invalid inputs. The objective behind this is to make sure the system shows an error when it\u2019s supposed to and does not show an error when it\u2019s not supposed to.</p>"},{"location":"QA/Manual/jira/","title":"Jira","text":"<p>Jira Software is part of a family of products designed to help teams of all types manage work. Originally, Jira was designed as a bug and issue tracker.</p>"},{"location":"QA/Manual/jira/#how-to-report-bugs","title":"How To Report Bugs","text":""},{"location":"QA/Manual/non-functional/","title":"Non-Functional Testing.","text":"<p>Non-Functional Testing is defined as a type of Software testing to check non-functional aspects (performance, usability, reliability, etc) of a software application. It is designed to test the readiness of a system as per nonfunctional parameters which are never addressed by functional testing.</p> <p>Resources</p> <p>Find more to learn on Non-Functional Testing : https://www.geeksforgeeks.org/software-testing-non-functional-testing/</p>"},{"location":"QA/Manual/non-functional/#performance-testing","title":"Performance Testing.","text":"<p>Performance testing is a form of software testing that focuses on how a system running the system performs under a particular load. This is not about finding software bugs or defects.</p> <p>Resources</p> <p>Find more to learn : https://www.tricentis.com/learn/performance-testing/</p>"},{"location":"QA/Manual/non-functional/#cross-browser-testing","title":"Cross-Browser Testing.","text":"<p>Cross Browser Testing is a type of testing to verify if an application works across different browsers as expected and degrades gracefully. It is the process of verifying your application\u2019s compatibility with different browsers.</p> <p>Resources</p> <p>Find more to learn : https://testsigma.com/cross-browser-testing</p>"},{"location":"QA/Manual/non-functional/#security-testing","title":"Security Testing.","text":"<p>Security testing is an integral part of software testing, which is used to discover the weaknesses, risks, or threats in the software application and also help us to stop the nasty attack from outsiders and make sure the security of our software applications.</p> <p>Resources</p> <p>Find more to learn : https://www.geeksforgeeks.org/software-testing-security-testing/</p>"},{"location":"QA/Manual/non-functional/#responsive-testing","title":"Responsive Testing.","text":"<p>The goal of responsive testing is to check if all the website components are adaptive to different screen sizes. </p> <p>Resources</p> <p>Find more to learn : https://www.lambdatest.com/learning-hub/responsive-testing</p>"},{"location":"QA/Manual/principle/","title":"Principles of Software Testing.","text":"<ul> <li>Exhaustive testing is not possible </li> <li>Defect Clustering </li> <li>Pesticide Paradox </li> <li>Testing shows a presence of defects </li> <li>Absence of Error \u2013 fallacy </li> <li>Early Testing </li> <li>Testing is context dependent </li> </ul> <p>Resources</p> <p>Find more to learn : https://www.interviewbit.com/blog/principles-of-software-testing/</p>"},{"location":"QA/Manual/regress/","title":"Regression Testing.","text":"<p>Regression testing is a type of testing where you can verify that the changes made in the codebase do not impact the existing software functionality. </p> <p>Resources</p> <p>Find more to learn : https://www.guru99.com/regression-testing.html</p>"},{"location":"QA/Manual/sdlc/","title":"Software Development Lifecycle.","text":"<p>SDLC is a process followed for a software project, within a software organization. It consists of a detailed plan describing how to develop, maintain, replace and alter or enhance specific software. The life cycle defines a methodology for improving the quality of software and the overall development process.</p> <p></p> <p>Resources</p> <p>To learn more, the best place to start is https://https://www.geeksforgeeks.org/software-development-life-cycle-sdlc/</p>"},{"location":"QA/Manual/sst/","title":"Smoke Testing.","text":"<p>Smoke Testing is a software testing process that determines whether the deployed software build is stable or not. Smoke testing is a confirmation for the QA team to proceed with further software testing.</p>"},{"location":"QA/Manual/sst/#sanity-testing","title":"Sanity Testing.","text":"<p>Sanity testing was performed when we are receiving software build (with minor code changes) from the development team. It is a checkpoint to assess if testing for the build can proceed or not.</p> <p>Resources</p> <p>Find more to learn  : https://www.geeksforgeeks.org/software-engineering-differences-between-sanity-testing-and-smoke-testing/</p>"},{"location":"QA/Manual/stlc/","title":"Software Testing  Lifecycle.","text":"<p>Software Testing Life Cycle (STLC) is a testing strategy that can help you efficiently meet software quality standards. STLC enforces systematic testing, which is performed in phases. STLC is often confused with Software Development Life Cycle (SDLC), but while STLC is focused on testing, SDLC encompasses all development stages.</p> <p> </p> <p>Resources</p> <p>Find more to learn : https://www.geeksforgeeks.org/software-testing-life-cycle-stlc/</p>"},{"location":"QA/Manual/stlc/#levels-of-testing","title":"Levels Of Testing.","text":""},{"location":"QA/Manual/test/","title":"How To Write Testcases.","text":"<p>A test case is a defined format for software testing required to check if a particular application/software is working or not. A test case consists of a certain set of conditions that need to be checked to test an application or software.</p> <p>Resources</p> <p>Find more to learn : https://www.geeksforgeeks.org/software-testing-test-case/</p>"},{"location":"QA/Mobile/mobile/","title":"Mobile Testing.","text":"<p>Mobile application testing is a process through which applications being developed for mobile devices are tested. The main focus is to test the apps for functionality, usability and stability.</p> <p>Mobile application testing is vital for an app\u2019s survival in today\u2019s market. To assure the best possible quality for the end users - the application is also tested from various other aspects including its performance, security, and the UI.</p> <p>Resources</p> <p>Find more to learn : https://testsigma.com/mobile-testing</p>"},{"location":"UI/UX/","title":"UI/UX","text":"<p>There are a number of paths to learning UI/UX design and there\u2019s not really a single right or wrong way. It all comes down to learning the theories behind good design and practicing them until you master them.</p> <p>Quote</p> <p>YOU CAN'T DO SOMETHING GREAT BY OCCASIONALLY DOING IT.</p>"},{"location":"UI/UX/#1-learn-the-fundamentals-of-ux-design","title":"1. Learn the fundamentals of UX design","text":"<p>The experience of a user on a website is arguably the most important part of any successful design\u2014which means it\u2019s important that you understand the main principles of UX design.</p> <p>UX design focuses on creating a delightful experience through meeting user needs and wants, as well as through user psychology.</p> <p>Understanding why users perform certain actions and what makes them continue using a site (or abandoning that site) is key to creating a digital product that meets user needs as well as business goals.</p> <p>Luckily, there are plenty of affordable (and free) UX tutorials, courses, and resources all at your disposal as well as tons of books on UX. A good place to start is with Steve Krug\u2019s Don\u2019t Make Me Think. Krug is widely regarded as the godfather of UX design.</p> <p>Resources</p> <p>Listen to the podcast below.</p> <ul> <li>Fundamentals of UX</li> </ul>"},{"location":"UI/UX/#2-develop-your-eye-for-good-uiux-design","title":"2. Develop your eye for good UI/UX design","text":"<p>Learning the basic principles of design will only take you so far. To really take your skills to the next level, practice studying the designs of websites and mobile apps you love with a critical eye.</p> <p>Next time you see a website you love, for example, take a few minutes to analyze what about it works so well for you. Is it the color palette? The interaction design? The typography?</p> <p>Look at every part of the design: the spacing between elements, the grid the site is designed on, the visual hierarchy of the site, and even the specific images and icons used. Ask yourself what\u2019s working and what\u2019s not? This is key to developing a strong visual eye for design.</p> <p>Just as important as what you love about a site is what you don\u2019t love. Study the site with a critical eye. Try to figure out why you don\u2019t like certain parts of the site, not just that you don\u2019t like them.</p> <p>Make it a habit to keep up to date with trending UI/UX designs on Dribbble &amp; Pinterest to stay current, get creative inspiration, and follow designers you admire.</p>"},{"location":"UI/UX/#3-learn-designing-tools","title":"3. Learn designing tools","text":"<p>There are plenty of great tools available on the market, but we suggest trying out a few industry stalwarts such as Adobe XD, Illustrator &amp; Photoshop.</p>"},{"location":"UI/UX/#31-adobe-xd","title":"3.1 Adobe XD","text":""},{"location":"UI/UX/#32-adobe-photoshop","title":"3.2 Adobe Photoshop","text":""},{"location":"UI/UX/#33-adobe-ilustrator","title":"3.3 Adobe Ilustrator","text":""},{"location":"UI/UX/#4-start-designing","title":"4. Start designing","text":"<p>Reading books and articles or watching design tutorials will only get you so far. What you really need to do to become proficient at UI/UX is actually design digital products and start accumulating a solid body of work.</p> <p>If you\u2019re starting from scratch, we highly recommend downloading some free UI kits (or user interface kit) to help get your designs started. A UI kit is a set of pre-made design components containing essential visual elements for a specific UI design (think buttons, icons, fonts, menus, etc.).</p> <p>Use these UI kits to design your own website or mobile app for starters. But also consider doing redesigns of existing sites. Pick some of your favorite websites and explore how you could redesign them to look and function even better.</p> <p>Resources</p> <p>Participate in daily UI/UX design challenges to develop your design skills.</p> <ul> <li>DailyUI</li> <li>UX Design</li> </ul>"},{"location":"UI/UX/#5-ask-for-feedback-and-learn-from-it","title":"5. Ask for feedback (and learn from it)","text":"<p>Contrary to popular belief, negative feedback can actually be much more useful than positive feedback. It can help you grow as a designer, level-up your skills, and create better products.</p> <p>Learn to seek and embrace negative design feedback and use it as fuel to improve your designs. Post your work on Dribbble and ask for constructive criticism\u2014the community is here to help.</p> <p>In the end, negative feedback can be one of the most positive things that can happen in your design career. Just remember, you don\u2019t need to overhaul all of your skills overnight. Trying to become one percent better every day will bring steady progress to success.</p>"},{"location":"UI/UX/design-guidelines/","title":"Design Guidelines","text":"<ul> <li>A wireframing tool should be used to create the UI/UX design. (XD, Figma).</li> <li>Follow the design guidelines when designing an app.<ul> <li>Android Guideline</li> <li>iOS Guideline</li> </ul> </li> <li>Please note in the design guidelines if you are using any UI frameworks when designing.</li> <li>For designing, a grid layout is recommended.</li> <li>The grid should be used to create mobile responsive websites &amp; apps.</li> <li>Artboards should be labeled.</li> <li>The prototype should be fully functional.</li> <li>All measurements should be in pixels.</li> <li>Small, medium and large desktops should all be taken into account when designing.</li> <li>You should only use two fonts. Google fonts are recommended.<ul> <li>Numbers should be clearly readable in the chosen font.</li> <li>Base font size should be defined and followed in the application.</li> <li>All heading tag fonts and sizes should be defined and used consistently throughout the application.</li> </ul> </li> <li>Color schemes should be defined separately, and colors outside the scheme should be avoided.<ul> <li>Primary, secondary, text color, and background color all must be defined.</li> </ul> </li> <li>The application's spacing should be consistent.</li> <li>All similar icons should be exported with a fixed-size transparent background layer and icon center alignment. Padding on the background layer should not exceed 2 pixels.<ul> <li>The line stroke of icons should be the same size throughout the application.</li> <li>If an icon library is used, please specify it in the export file.</li> <li>It is best to use icons in SVG format.</li> <li>The names of images and icons should correspond to their uses in applications.</li> <li>The name of the icon should be followed by the letters \u201cic\u201d.</li> </ul> </li> <li>Mobile responsive design should not be fundamentally different from web design.</li> </ul>"},{"location":"UI/UX/laws-ux/","title":"Laws of UX","text":"<p>Laws of UX is a collection of best practices that designers can consider when building user interfaces.</p>"},{"location":"UI/UX/laws-ux/#1-aesthetic-usability-effect","title":"1. Aesthetic-Usability Effect","text":"<p>Users often perceive aesthetically pleasing design as design that\u2019s more usable. - An aesthetically pleasing design creates a positive response in people\u2019s brains and leads them to believe the design actually works better. - People are more tolerant of minor usability issues when the design of a product or service is aesthetically pleasing. - Visually pleasing design can mask usability problems and prevent issues from being discovered during usability testing.</p>"},{"location":"UI/UX/laws-ux/#2-doherty-threshold","title":"2. Doherty Threshold","text":"<p>Productivity soars when a computer and its users interact at a pace (&lt;400ms) that ensures that neither has to wait on the other. Provide system feedback within 400 ms in order to keep users\u2019 attention and increase productivity. - Use perceived performance to improve response time and reduce the perception of waiting. - Animation is one way to visually engage people while loading or processing is happening in the background. - Progress bars help make wait times tolerable, regardless of their accuracy. - Purposefully adding a delay to a process can actually increase its perceived value and instill a sense of trust, even when the process itself actually takes much less time.</p>"},{"location":"UI/UX/laws-ux/#3-fittss-law","title":"3. Fitts\u2019s Law","text":"<p>The time to acquire a target is a function of the distance to and size of the target. - Touch targets should be large enough for users to accurately select them. - Touch targets should have ample spacing between them. - Touch targets should be placed in areas of an interface that allow them to be easily acquired.</p>"},{"location":"UI/UX/laws-ux/#4-goal-gradient-effect","title":"4. Goal-Gradient Effect","text":"<p>The tendency to approach a goal increases with proximity to the goal. - The closer users are to completing a task, the faster they work towards reaching it. - Providing artificial progress towards a goal will help to ensure users are more likely to have the motivation to complete that task. - Provide a clear indication of progress in order to motivate users to complete tasks.</p>"},{"location":"UI/UX/laws-ux/#5-hicks-law","title":"5. Hick\u2019s Law","text":"<p>The time it takes to make a decision increases with the number and complexity of choices. - Minimize choices when response times are critical to increase decision time. - Break complex tasks into smaller steps in order to decrease cognitive load. - Avoid overwhelming users by highlighting recommended options. - Use progressive onboarding to minimize cognitive load for new users. - Be careful not to simplify to the point of abstraction.</p>"},{"location":"UI/UX/laws-ux/#6-jakobs-law","title":"6. Jakob\u2019s Law","text":"<p>Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know. - Users will transfer expectations they have built around one familiar product to another that appears similar. - By leveraging existing mental models, we can create superior user experiences in which the users can focus on their tasks rather than on learning new models. - When making changes, minimize discord by empowering users to continue using a familiar version for a limited time.</p>"},{"location":"UI/UX/laws-ux/#7-law-of-common-region","title":"7. Law of Common Region","text":"<p>Elements tend to be perceived into groups if they are sharing an area with a clearly defined boundary. - Common region creates a clear structure and helps users quickly and effectively understand the relationship between elements and sections. - Adding a border around an element or group of elements is an easy way to create common region. - Common region can also be created by defining a background behind an element or group of elements.</p>"},{"location":"UI/UX/laws-ux/#8-law-of-proximity","title":"8. Law of Proximity","text":"<p>Objects that are near, or proximate to each other, tend to be grouped together. - Proximity helps to establish a relationship with nearby objects. - Elements in close proximity are perceived to share similar functionality or traits. - Proximity helps users understand and organize information faster and more efficiently.</p>"},{"location":"UI/UX/laws-ux/#9-law-of-pragnanz","title":"9. Law of Pr\u00e4gnanz","text":"<p>People will perceive and interpret ambiguous or complex images as the simplest form possible, because it is the interpretation that requires the least cognitive effort of us. - The human eye likes to find simplicity and order in complex shapes because it prevents us from becoming overwhelmed with information. - Research confirms that people are better able to visually process and remember simple figures than complex figures. - The human eye simplifies complex shapes by transforming them into a single, unified shape.</p>"},{"location":"UI/UX/laws-ux/#10-law-of-similarity","title":"10. Law of Similarity","text":"<p>The human eye tends to perceive similar elements in a design as a complete picture, shape, or group, even if those elements are separated. - Elements that are visually similar will be perceived as related. - Color, shape, and size, orientation and movement can signal that elements belong to the same group and likely share a common meaning or functionality. - Ensure that links and navigation systems are visually differentiated from normal text elements.</p>"},{"location":"UI/UX/laws-ux/#11-law-of-uniform-connectedness","title":"11. Law of Uniform Connectedness","text":"<p>Elements that are visually connected are perceived as more related than elements with no connection. - Group functions of a similar nature so they are visually connected via colors, lines, frames, or other shapes. - Alternately, you can use a tangible connecting reference (line, arrow, etc) from one element to the next to also create a visual connection. - Use uniform connectedness to show context or to emphasize the relationship between similar items.</p>"},{"location":"UI/UX/laws-ux/#12-millers-law","title":"12. Miller\u2019s Law","text":"<p>The average person can only keep 7 (plus or minus 2) items in their working memory. - Don\u2019t use the \u201cmagical number seven\u201d to justify unnecessary design limitations. - Organize content into smaller chunks to help users process, understand, and memorize easily. - Remember that short-term memory capacity will vary per individual, based on their prior knowledge and situational context.</p>"},{"location":"UI/UX/laws-ux/#13-occams-razor","title":"13. Occam\u2019s Razor","text":"<p>Among competing hypotheses that predict equally well, the one with the fewest assumptions should be selected. - The best method for reducing complexity is to avoid it in the first place. - Analyze each element and remove as many as possible, without compromising the overall function. - Consider completion only when no additional items can be removed.</p>"},{"location":"UI/UX/laws-ux/#14-pareto-principle","title":"14. Pareto Principle","text":"<p>The Pareto principle states that, for many events, roughly 80% of the effects come from 20% of the causes. - Inputs and outputs are often not evenly distributed. - A large group may contain only a few meaningful contributors to the desired outcome. - Focus the majority of effort on the areas that will bring the largest benefits to the most users.</p>"},{"location":"UI/UX/laws-ux/#15-parkinsons-laws","title":"15. Parkinson\u2019s Laws","text":"<p>Any task will inflate until all of the available time is spent. - Limit the time it takes to complete a task to what users expect it\u2019ll take. - Reducing the actual duration to complete a task from the expected duration will improve the overall user experience.</p>"},{"location":"UI/UX/laws-ux/#16-peak-end-rule","title":"16. Peak-End Rule","text":"<p>People judge an experience largely based on how they felt at its peak and at its end, rather than the total sum or average of every moment of the experience. - Pay close attention to the most intense points and the final moments (the \u201cend\u201d) of the user journey. - Identify the moments when your product is most helpful, valuable, or entertaining and design to delight the end user. - Remember that people recall negative experiences more vividly than positive ones.</p>"},{"location":"UI/UX/laws-ux/#17-postels-law","title":"17. Postel\u2019s Law","text":"<p>Be liberal in what you accept, and conservative in what you send. - Be empathetic to, flexible about, and tolerant of any of the various actions the user could take or any input they might provide. - Anticipate virtually anything in terms of input, access, and capability while providing a reliable and accessible interface - The more we can anticipate and plan for in design, the more resilient the design will be. - Accept variable input from users, translating that input to meet your requirements, defining boundaries for input, and providing clear feedback to the user.</p>"},{"location":"UI/UX/laws-ux/#18-serial-position-effect","title":"18. Serial Position Effect","text":"<p>Users have a propensity to best remember the first and last items in a series. - Placing the least important items in the middle of lists can be helpful because these items tend to be stored less frequently in long-term and working memory. - Positioning key actions on the far left and right within elements such as navigation can increase memorization.</p>"},{"location":"UI/UX/laws-ux/#19-teslers-law","title":"19. Tesler\u2019s Law","text":"<p>Tesler\u2019s Law, also known as The Law of Conservation of Complexity, states that for any system there is a certain amount of complexity which cannot be reduced. - All processes have a core of complexity that cannot be designed away and therefore must be assumed by either the system or the user. - Ensure as much as possible of the burden is lifted from users by dealing with inherent complexity during design and development. - Take care not to simplify interfaces to the point of abstraction.</p>"},{"location":"UI/UX/laws-ux/#20-von-restorff-effect","title":"20. Von Restorff Effect","text":"<p>The Von Restorff effect, also known as The Isolation Effect, predicts that when multiple similar objects are present, the one that differs from the rest is most likely to be remembered. - Make important information or key actions visually distinctive. - Use restraint when placing emphasis on visual elements to avoid them competing with one another and to ensure salient items don\u2019t get mistakenly identified as ads. - Don\u2019t exclude those with a color vision deficiency or low vision by relying exclusively on color to communicate contrast. - Carefully consider users with motion sensitivity when using motion to communicate contrast.</p>"},{"location":"UI/UX/laws-ux/#21-zeigarnik-effect","title":"21. Zeigarnik Effect","text":"<p>People remember uncompleted or interrupted tasks better than completed tasks. - Invite content discovery by providing clear signifiers of additional content. - Providing artificial progress towards a goal will help to ensure users are more likely to have the motivation to complete that task. - Provide a clear indication of progress in order to motivate users to complete tasks. </p> <p>Hint</p> <p>For the above document, we are referring to the book UX laws. Please visit the website Laws of UX for additional information.</p>"},{"location":"UI/UX/principals/","title":"Best Practices","text":""},{"location":"UI/UX/principals/#ui-ux-methods","title":"UI &amp; UX Methods","text":""},{"location":"UI/UX/principals/#1-user-research","title":"1. User Research","text":"<p>A UX researcher should always be mindful of the differences in opinions and perceptions toward a good user experience. Do not make assumptions based on your experience. If you do so, you will not be able to understand the needs of users. Instead, research the target users to learn from their perspectives.</p> <p>On top of this,  perceptions of a good user experience vary across demographics such as age, education, nationality etc. It is important to involve the correct users in your research. Below are some of the most commonly used research methods in UX:</p>"},{"location":"UI/UX/principals/#11-user-interview","title":"1.1 User Interview","text":"<p>A user interview is a qualitative, one-to-one, and one of the most commonly used research techniques. It is a guided conversation where the researchers ask questions and take down the responses from the participants. The advantage of the interview lies in its flexibility and a well-structured interview enables researchers to gain detailed information and deep insights into the users.</p>"},{"location":"UI/UX/principals/#12-survey","title":"1.2 Survey","text":"<p>A survey is usually used when you need to collect a large sample size. It can be conducted online and offline through paper surveys. While the survey is administered through a questionnaire with a list of questions, it is almost an art to make it not too short to collect enough information and not too long in order not to turn respondents away.</p>"},{"location":"UI/UX/principals/#13-group-discussion","title":"1.3 Group Discussion","text":"<p>In a focus group discussion, five to ten participants are gathered together to discuss a series of questions. This enables the researchers to gather as diverse views as possible. Many agencies have tried to recruit groups of participants from diverse demographic backgrounds to avoid group think behavior among the groups.</p>"},{"location":"UI/UX/principals/#14-card-sorting","title":"1.4 Card Sorting","text":"<p>Card sorting is a method commonly used to aid the design of information architecture, workflows, menu structures, or website navigation paths. The researchers will first write down the key elements or concepts on index cards. The users will then reorganize the cards to establish structures or relationships.</p>"},{"location":"UI/UX/principals/#2-user-personas","title":"2. User Personas","text":"<p>User personas are archetypical users whose goals and characteristics represent the needs of a larger group of users. Usually, a persona is presented in a one or two-page document (like the one you can see in the example below). Such 1\u20132-page descriptions include behavior patterns, goals, skills, attitudes, and background information, as well as the environment in which a persona operates. Designers usually create user persona template templates, which include a few fictional personal details to make the persona a realistic character (e.g. quotes of real users), as well as context-specific details (for example, for a banking app it makes sense to include a persona\u2019s financial sophistication and major expenses).</p> <p> User persona template. Image by Xtensio.</p>"},{"location":"UI/UX/principals/#21-empathy-mapping","title":"2.1. Empathy Mapping","text":"<p>Empathy is a core value if designers want to make something that is good for the people who are going to use it. Personas help designers to create understanding and empathy with the end-users.</p> <ul> <li>Gain a perspective similar to the user. Creating user personas can help designers step out of themselves and recognize that different people have different needs and expectations. By thinking about the needs of a fictional persona, designers may be better able to infer what a real person might need.</li> <li>Identify with the user they are designing for. The more designers engage with the user personas and see them as real people, the more likely they will be to consider them during the design process and want to create the best product for them.</li> </ul> <p></p>"},{"location":"UI/UX/principals/#22-storyboards","title":"2.2. Storyboards","text":"<p>A storyboard is a comic strip used to capture a user\u2019s interaction with a product or service. It allows researchers and stakeholders alike to visualize and brainstorm.</p>"},{"location":"UI/UX/principals/#3-wireframing","title":"3. Wireframing","text":"<p>A wireframe is a visual guide to the framework of your product. It allows you to define the information architecture, navigation design, and interface design. The most important advantage of wireframing is that it provides an early version of the product for you to review with both your internal and external stakeholders. Adjustments can be made easily to the wireframes before moving on to the more complicated process of technical development.</p>"},{"location":"UI/UX/principals/#4-prototype","title":"4. Prototype","text":"<p>A prototype is version 1.0 of your website or product.  It resembles the closet version of your final outcome. A prototype allows the UX researchers to examine and identify any flaws, errors, or inconsistencies in overall design and experience before it is converted to the actual version by the development team.</p>"},{"location":"UI/UX/principals/#5-testing","title":"5. Testing","text":"<p>With prototypes, user testing can be conducted with users to validate the design flow and user experience.</p>"},{"location":"UI/UX/principals/#51-heuristic-evaluation","title":"5.1. Heuristic Evaluation","text":"<p>Heuristic evaluation is the experts\u2019 reviews of a website\u2019s usability according to a list of usability principles and common heuristics. While UX experts could never replace user testing, they can identify any discrepancies from the common heuristics. You can then eliminate these discrepancies before proceeding to user testing.</p>"},{"location":"UI/UX/principals/#52-usability-testing","title":"5.2. Usability Testing","text":"<p>In usability testing, participants are invited to perform a few guided tasks on the prototype and actual product. The settings are usually in the lab or in the form of contextual inquiry. Contextual inquiry is a semi-structured interview method to obtain information about the context of use. Users are observed and questioned while they work in their own environments to make them feel comfortable. Usability testing might be one of the most used UX methods. It is very effective in identifying potential usability or design issues and exploring the area of improvement in functionality.</p>"},{"location":"UI/UX/principals/#53-ab-testing-and-multivariate-testing","title":"5.3. A/B Testing and Multivariate Testing","text":"<p>A/B Testing is a method of comparing two versions of a website or product to determine which one has better performance. It is usually used to test new or experimental feature update before it is released.</p> <p>Hint</p> <p>Some worthwhile items to read</p> <ul> <li>interaction-design</li> <li>UX Planet</li> <li>UXPin</li> </ul>"}]}